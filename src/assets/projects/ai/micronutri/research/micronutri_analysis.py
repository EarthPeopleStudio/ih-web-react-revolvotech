# -*- coding: utf-8 -*-
"""Gut.Microbiome.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QOBaaU35xz1CQSx2VX3f4y3v9txPN6zy
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd

df = pd.read_csv('Gut_Microbiota_T2D (2).CSV')
df.head()

# Remove rows where 'T2D' is missing
df = df.dropna(subset=['T2D'])

# Convert T2D column to integer (in case it’s float)
df['T2D'] = df['T2D'].astype(int)

# Double check no missing values
print("Any NaNs in target now?", df['T2D'].isna().sum())

# Define features (X) and target (y)
X = df.drop(columns=['SampleID', 'T2D'], errors='ignore')
y = df['T2D']

# Train-test split
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train model
from sklearn.ensemble import RandomForestClassifier
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

# Predict + Accuracy
from sklearn.metrics import accuracy_score
preds = model.predict(X_test)
accuracy = accuracy_score(y_test, preds)
print("🔍 Model Accuracy:", round(accuracy * 100, 2), "%")

import matplotlib.pyplot as plt
import numpy as np

# Feature importances
importances = model.feature_importances_
features = X.columns
indices = np.argsort(importances)[-10:]  # Top 10 bacteria

# Plot
plt.figure(figsize=(8, 6))
plt.barh(range(len(indices)), importances[indices], align='center')
plt.yticks(range(len(indices)), [features[i] for i in indices])
plt.xlabel('Importance Score')
plt.title('Top 10 Gut Microbes Predicting T2D')
plt.tight_layout()
plt.show()

# Save full feature importance table
import pandas as pd

importance_df = pd.DataFrame({
    'Bacteria': features,
    'Importance': importances
}).sort_values(by='Importance', ascending=False)

importance_df.to_csv('microbe_importance.csv', index=False)

from google.colab import files
files.download('microbe_importance.csv')

# 📊 Gut Microbiota Dietary Recommendation System

# Dictionary with bacteria and what to do with them
bacteria_info = {
    "Prevotella_9": {"role": "harmful", "recommendation": "Reduce refined carbs, focus on low-starch vegetables", "pubmed": "31209315"},
    "Faecalibacterium": {"role": "beneficial", "recommendation": "Increase fiber (soluble), healthy fats", "pubmed": "34230623"},
    "Senegalimassilia": {"role": "unclear", "recommendation": "Ensure fat quality and fiber balance", "pubmed": "35168312"},
    "Dialister": {"role": "mixed", "recommendation": "Promote microbial diversity (fermented foods, fiber)", "pubmed": "29172717"},
    "Slackia": {"role": "harmful", "recommendation": "Limit excess animal fat, increase polyphenols", "pubmed": "31685934"},
    "Butyricicoccus": {"role": "beneficial", "recommendation": "Increase resistant starch, legumes", "pubmed": "26898666"},
    "Alloprevotella": {"role": "harmful", "recommendation": "Limit starch/sugar; maintain low-carb, high-fat approach", "pubmed": "31321580"},
    "Libanicoccus": {"role": "emerging", "recommendation": "Increase fiber, avoid ultra-processed foods", "pubmed": "34945862"},
    "Ruminococcaceae_UCG.002": {"role": "beneficial", "recommendation": "Whole food keto with fiber-rich vegetables", "pubmed": "34674563"},
    "Prevotella_7": {"role": "harmful", "recommendation": "Limit refined carbs and starches", "pubmed": "31801460"}
}

# Simulated user input
user_data = {
    "Age": 28,
    "Gender": "Female",
    "Weight": 65,
    "Height_cm": 160,
    "Diabetes_Status": "T2DM",  # or "Healthy"
    "Bacteria_Levels": {
        "Prevotella_9": 3.4,
        "Faecalibacterium": 1.2,
        "Senegalimassilia": 2.0,
        "Dialister": 2.8,
        "Slackia": 3.1,
        "Butyricicoccus": 0.9,
        "Alloprevotella": 3.5,
        "Libanicoccus": 1.5,
        "Ruminococcaceae_UCG.002": 1.1,
        "Prevotella_7": 3.2
    }
}

# Calculate BMI
height_m = user_data["Height_cm"] / 100
BMI = user_data["Weight"] / (height_m ** 2)

# Output profile
print(f"🧬 Age: {user_data['Age']} | Gender: {user_data['Gender']} | BMI: {BMI:.1f} | Status: {user_data['Diabetes_Status']}\\n")

# Generate advice
print("📌 Dietary Recommendations Based on Gut Microbiota Profile:")
for bacteria, level in user_data["Bacteria_Levels"].items():
    info = bacteria_info.get(bacteria, {})
    status = "⬆️ High" if level > 2.5 else "⬇️ Low"
    print(f"• {bacteria} ({status}): {info.get('recommendation')} [PubMed: {info.get('pubmed')}]")

!pip install streamlit pyngrok

code = """
import streamlit as st

# --- Gut Bacteria Logic ---
advice_dict = {
    'Prevotella_9': {
        'role': 'Harmful',
        'threshold': 0.06,
        'increase_advice': "Limit refined & high-starch carbs; focus on high-protein, high-fat, low-carb diet",
        'decrease_advice': "N/A",
        'pubmed': "38526814"
    },
    'Faecalibacterium': {
        'role': 'Protective',
        'threshold': 0.05,
        'increase_advice': "Increase soluble fermentable fiber + healthy fats",
        'decrease_advice': "Avoid low-fiber processed diets",
        'pubmed': "37025162"
    },
    'Senegalimassilia': {
        'role': 'Mixed',
        'threshold': 0.03,
        'increase_advice': "Ensure protein/fat quality and plant fiber",
        'decrease_advice': "Avoid excess animal fats",
        'pubmed': "33950514"
    },
    'Dialister': {
        'role': 'Mixed',
        'threshold': 0.04,
        'increase_advice': "Add fermented foods and plant diversity",
        'decrease_advice': "Reduce processed high-fat foods",
        'pubmed': "34527994"
    },
    'Slackia': {
        'role': 'Harmful',
        'threshold': 0.03,
        'increase_advice': "Include plant polyphenols and fiber",
        'decrease_advice': "Avoid excessive animal protein",
        'pubmed': "33819155"
    },
    'Butyricicoccus': {
        'role': 'Protective',
        'threshold': 0.02,
        'increase_advice': "Increase resistant starch and fiber-rich vegetables",
        'decrease_advice': "Limit refined sugar",
        'pubmed': "33255858"
    },
    'Alloprevotella': {
        'role': 'Harmful',
        'threshold': 0.02,
        'increase_advice': "Cut down refined carbs and processed starch",
        'decrease_advice': "Focus on low-carb ketogenic foods",
        'pubmed': "30675292"
    },
    'Libanicoccus': {
        'role': 'Unclear',
        'threshold': 0.01,
        'increase_advice': "Preserve diversity with high-fiber keto",
        'decrease_advice': "Avoid ultra-processed foods",
        'pubmed': "35704598"
    },
    'Ruminococcaceae_UCG.002': {
        'role': 'Protective',
        'threshold': 0.03,
        'increase_advice': "Add whole-food fiber + moderate fats",
        'decrease_advice': "Avoid refined carbs",
        'pubmed': "36058827"
    },
    'Prevotella_7': {
        'role': 'Harmful',
        'threshold': 0.05,
        'increase_advice': "Avoid high-carb and low-protein diets",
        'decrease_advice': "Shift to high-fat, high-protein diet",
        'pubmed': "37468350"
    }
}

# --- Frontend ---
st.title("🧬 Gut Microbiota Diet App")
st.write("Personalized diet advice based on your microbiota profile")

age = st.number_input("Age", min_value=10, max_value=100, step=1)
gender = st.selectbox("Gender", ["Male", "Female"])
weight = st.number_input("Weight (kg)", min_value=30.0, max_value=200.0)
height = st.number_input("Height (cm)", min_value=120.0, max_value=230.0)
status = st.selectbox("Diabetes Status", ["Healthy", "T2DM"])

st.write("### Bacterial Abundance Levels (0.00 - 5.00)")
bacteria_levels = {}
for b in advice_dict:
    bacteria_levels[b] = st.slider(f"{b}", 0.0, 5.0, 1.5, step=0.01)

if st.button("Get Diet Advice"):
    st.markdown("---")
    bmi = round(weight / ((height / 100) ** 2), 2)
    st.subheader(f"📊 BMI: {bmi} ({'Overweight' if bmi > 25 else 'Normal'})")

    st.subheader("🔍 Gut Microbiota Insights")
    for b, level in bacteria_levels.items():
        info = advice_dict[b]
        role = info['role']
        threshold = info['threshold']
        pubmed_id = info['pubmed']
        concern = (
            (role == "Harmful" and level > threshold) or
            (role == "Protective" and level < threshold)
        )
        if concern:
            st.markdown(f"**{b}** ⚠️\n- {info['increase_advice']}\n- Ref: [PubMed](https://pubmed.ncbi.nlm.nih.gov/{pubmed_id})")
        else:
            st.markdown(f"**{b}** ✅ Healthy level")

    st.subheader("📌 Core Diet Plan")
    st.write("High-protein, high-fat, low-carbohydrate ketogenic diet, adjusted based on your microbiome profile.")
"""

with open("app.py", "w") as f:
    f.write(code)

